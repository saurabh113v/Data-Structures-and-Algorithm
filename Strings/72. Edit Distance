class Solution {
    public int minDistance(String word1, String word2) {
         int lenWord1 = word1.length();
        int lenWord2 = word2.length();

        // Create a 2D array to store the subproblem results
        int[][] dpTable = new int[lenWord1 + 1][lenWord2 + 1];

        // Initialize the first column, representing insertions needed to transform an empty string into word2
        for (int indexWord2 = 1; indexWord2 <= lenWord2; ++indexWord2) {
            dpTable[0][indexWord2] = indexWord2;
        }

        // Fill out the dpTable for all subproblems
        for (int indexWord1 = 1; indexWord1 <= lenWord1; ++indexWord1) {
            // First row represents deletions needed to transform word1 into an empty string
            dpTable[indexWord1][0] = indexWord1;

            for (int indexWord2 = 1; indexWord2 <= lenWord2; ++indexWord2) {
                // If the characters are the same, take the value from the diagonal (no operation needed)
                if (word1.charAt(indexWord1 - 1) == word2.charAt(indexWord2 - 1)) {
                    dpTable[indexWord1][indexWord2] = dpTable[indexWord1 - 1][indexWord2 - 1];
                } else {
                    // If the characters are different, take the minimum operations from left (insert), top (delete), or diagonal (replace) and add 1
                    int insertOps = dpTable[indexWord1][indexWord2 - 1];
                    int deleteOps = dpTable[indexWord1 - 1][indexWord2];
                    int replaceOps = dpTable[indexWord1 - 1][indexWord2 - 1];

                    dpTable[indexWord1][indexWord2] = Math.min(insertOps, Math.min(deleteOps, replaceOps)) + 1;
                }
            }
        }

        // The bottom-right cell gives the final result
        return dpTable[lenWord1][lenWord2];
    }
}
