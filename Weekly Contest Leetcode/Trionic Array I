class Solution {
    public static boolean isTrionic(int[] nums) {
        int n = nums.length;

        // Try all valid (p, q) combinations
        for (int p = 1; p < n - 2; p++) {
            for (int q = p + 1; q < n - 1; q++) {
                if (isStrictlyIncreasing(nums, 0, p) &&
                    isStrictlyDecreasing(nums, p, q) &&
                    isStrictlyIncreasing(nums, q, n - 1)) {
                    return true;
                }
            }
        }
        return false;
    }

    private static boolean isStrictlyIncreasing(int[] nums, int start, int end) {
        for (int i = start; i < end; i++) {
            if (nums[i] >= nums[i + 1]) return false;
        }
        return true;
    }

    private static boolean isStrictlyDecreasing(int[] nums, int start, int end) {
        for (int i = start; i < end; i++) {
            if (nums[i] <= nums[i + 1]) return false;
        }
        return true;
    }

    public static void main(String[] args) {
        int[] nums1 = {1, 3, 5, 4, 2, 6};
        int[] nums2 = {2, 1, 3};

        System.out.println("Example 1: " + isTrionic(nums1)); // true
        System.out.println("Example 2: " + isTrionic(nums2)); // false
    }
}
